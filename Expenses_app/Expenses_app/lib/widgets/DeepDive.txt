********************************** Widget Lifecycle *************************************

1. Lifecycle of StateLess Widget :

StateLess Widget --> Constructor Function --> build()

2. Lifecycle of Stateful Widget :

Stateful Widget --> Constructor Function --> initState() --> build() --> setState() --> didUpdateWidget() --> build() --> dispose()

initState() - reserved method that is automatically called by flutter when the state object is created for the first time 
and since state object is independent of widgets, so when widget is rebuilt initState will not run again. 
its used when you want to fetch some data initially.

build() - executed everytime the state is created or when called by setState().

setState() - called to rebuild the widget after updating.

didUpdateWidget() - executed when build method of parent widget is called. it can be used when you know you need to refetch something.

dispose() - if the widget is destroyed or removed (when you render widgets on some codition and condition become false)
then dispose is called. its used to clear the data.


************************************** APP Lifecycle *******************************************

> inactive State - App is inactive, no user input is recieved.

> paused - App not visible to user, running in background.

> resumed - App is again visible and responding to user input.

> suspending - App is about to be suspended (exited)

You can listen to this states by using a Mixing(when you want to use properties or method of class without inheriting it), 
of WidgetBindingObserver, then use didChangeAppLifecycleState().


************************************ Understanding Context ****************************************

> Every Widget has its own Context. 
> Context in the widget is the element of the widget in the element tree, its Meta information on the widget 
  & its location in the widget tree. 
> flutter use this to locate the widget in widget tree, and these element has information of how they are connected to other widgets.

***********************************  What are Keys? ***************************************

Problem with list and Stateful widgets :

> Every widget in the widget tree has a element in element tree and the state object is attached to that element.
> when we remove a particular List item ex.list item 1  --> flutter rebuilds the widget tree --> simultaneously element tree is checked --> 
if the widget belonging to particular element type is present that element is kept and the state attached to it as well --> so when we 
delete item 1, item 2 takes its place --> now while building element tree for item 1, flutter checks for the widget type --> state object
and element of item 1 is matched with widget of item 2 --> therefore state of widget one is acquired by item 2.

> Every Widget in flutter can have a Key
> But we can define a key only if the widget is the direct child of listview widget.
> its for the unique identity of list items.
> it tells flutter that even though this items has same widget type, but has unique element and state attached to it.
> its mostly used for list views with stateful widgets as children.